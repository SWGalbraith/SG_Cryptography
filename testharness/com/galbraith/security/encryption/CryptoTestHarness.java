package com.galbraith.security.encryption;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.File;
import javax.crypto.SecretKey;
import javax.swing.JOptionPane;

/**
 *
 * @author Sean Galbraith
 */
public class CryptoTestHarness extends javax.swing.JFrame {

    private ICrypto crypto;
    private ICryptoFileManager cryptoFileManager;
    
    /** Creates new form CryptoTestHarness */
    public CryptoTestHarness() {
        initComponents();
        
        crypto = new CryptoAES();
        cryptoFileManager = new CryptoFileManager();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dlgFileChooser = new javax.swing.JFileChooser();
        pnlCryptoOps = new javax.swing.JPanel();
        lblInput = new javax.swing.JLabel();
        lblOutput = new javax.swing.JLabel();
        scrollInput = new javax.swing.JScrollPane();
        txtInput = new javax.swing.JTextArea();
        scrollOutput = new javax.swing.JScrollPane();
        txtOutput = new javax.swing.JTextArea();
        btnGetCryptoKey = new javax.swing.JButton();
        btnEncrypt = new javax.swing.JButton();
        btnDecrypt = new javax.swing.JButton();
        btnHexToBytes = new javax.swing.JButton();
        btnBytesToHex = new javax.swing.JButton();
        btnGetCryptoKeyFromBytes = new javax.swing.JButton();
        lblKey = new javax.swing.JLabel();
        lblSeed = new javax.swing.JLabel();
        txtKey = new javax.swing.JTextField();
        txtSeed = new javax.swing.JTextField();
        pnlCryptoFileOps = new javax.swing.JPanel();
        txtCryptoKey = new javax.swing.JTextField();
        lblCryptoKey = new javax.swing.JLabel();
        txtPassword = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        txtCryptoSeed = new javax.swing.JTextField();
        lblCryptoSeed = new javax.swing.JLabel();
        txtFilepath = new javax.swing.JTextField();
        lblFilepath = new javax.swing.JLabel();
        btnCreateCryptoFile = new javax.swing.JButton();
        btnGetStoredKey = new javax.swing.JButton();
        btnGetStoredSeed = new javax.swing.JButton();
        btnUpdatePassword = new javax.swing.JButton();
        btnRemoveFile = new javax.swing.JButton();
        btnFileChooser = new javax.swing.JButton();
        txtNewPassword = new javax.swing.JTextField();
        lblNewPassword = new javax.swing.JLabel();

        dlgFileChooser.setCurrentDirectory(new java.io.File("C:\\"));
            dlgFileChooser.setDialogTitle("Choose File");
            dlgFileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
            setTitle("Crypto Test Harness");
            setResizable(false);

            pnlCryptoOps.setBorder(javax.swing.BorderFactory.createTitledBorder("Crypto Operations"));

            lblInput.setText("Input");

            lblOutput.setText("Output");
            lblOutput.setToolTipText("");

            txtInput.setColumns(20);
            txtInput.setLineWrap(true);
            txtInput.setRows(5);
            scrollInput.setViewportView(txtInput);

            txtOutput.setColumns(20);
            txtOutput.setLineWrap(true);
            txtOutput.setRows(5);
            scrollOutput.setViewportView(txtOutput);

            btnGetCryptoKey.setText("Create New Crypto Key");
            btnGetCryptoKey.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnGetCryptoKeyActionPerformed(evt);
                }
            });

            btnEncrypt.setText("Encrypt Input");
            btnEncrypt.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnEncryptActionPerformed(evt);
                }
            });

            btnDecrypt.setText("Decrypt Input");
            btnDecrypt.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnDecryptActionPerformed(evt);
                }
            });

            btnHexToBytes.setText("Base64 to Bytes (Input)");
            btnHexToBytes.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnHexToBytesActionPerformed(evt);
                }
            });

            btnBytesToHex.setText("Bytes To Base64 (Input)");
            btnBytesToHex.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnBytesToHexActionPerformed(evt);
                }
            });

            btnGetCryptoKeyFromBytes.setText("Get Crypto Key from Bytes");
            btnGetCryptoKeyFromBytes.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnGetCryptoKeyFromBytesActionPerformed(evt);
                }
            });

            lblKey.setText("Crypto Key");

            lblSeed.setText("Crypto Seed");

            javax.swing.GroupLayout pnlCryptoOpsLayout = new javax.swing.GroupLayout(pnlCryptoOps);
            pnlCryptoOps.setLayout(pnlCryptoOpsLayout);
            pnlCryptoOpsLayout.setHorizontalGroup(
                pnlCryptoOpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlCryptoOpsLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblInput)
                    .addGap(296, 296, 296)
                    .addComponent(lblOutput)
                    .addGap(135, 135, 135))
                .addGroup(pnlCryptoOpsLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(pnlCryptoOpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnGetCryptoKey, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnHexToBytes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnBytesToHex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnGetCryptoKeyFromBytes, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                        .addComponent(btnEncrypt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDecrypt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(pnlCryptoOpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(scrollInput, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(pnlCryptoOpsLayout.createSequentialGroup()
                            .addGroup(pnlCryptoOpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblKey)
                                .addComponent(lblSeed))
                            .addGap(8, 8, 8)
                            .addGroup(pnlCryptoOpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtKey)
                                .addGroup(pnlCryptoOpsLayout.createSequentialGroup()
                                    .addComponent(txtSeed, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 0, Short.MAX_VALUE)))))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(scrollOutput))
            );
            pnlCryptoOpsLayout.setVerticalGroup(
                pnlCryptoOpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlCryptoOpsLayout.createSequentialGroup()
                    .addGroup(pnlCryptoOpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblInput)
                        .addComponent(lblOutput))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(pnlCryptoOpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(scrollOutput)
                        .addGroup(pnlCryptoOpsLayout.createSequentialGroup()
                            .addGroup(pnlCryptoOpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(pnlCryptoOpsLayout.createSequentialGroup()
                                    .addComponent(btnGetCryptoKey)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnGetCryptoKeyFromBytes)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                                    .addComponent(btnEncrypt)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnDecrypt))
                                .addComponent(scrollInput))
                            .addGroup(pnlCryptoOpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(pnlCryptoOpsLayout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(btnHexToBytes)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnBytesToHex))
                                .addGroup(pnlCryptoOpsLayout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(pnlCryptoOpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblKey)
                                        .addComponent(txtKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(12, 12, 12)
                                    .addGroup(pnlCryptoOpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblSeed)
                                        .addComponent(txtSeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addContainerGap())
            );

            pnlCryptoFileOps.setBorder(javax.swing.BorderFactory.createTitledBorder("Crypto Info File Operations"));

            lblCryptoKey.setText("Crypto Key");

            lblPassword.setText("Password");

            lblCryptoSeed.setText("Crypto Seed");

            txtFilepath.setEditable(false);
            txtFilepath.setBackground(new java.awt.Color(255, 255, 255));

            lblFilepath.setText("Filepath (optional)");

            btnCreateCryptoFile.setText("Create New Crypto Info File");
            btnCreateCryptoFile.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnCreateCryptoFileActionPerformed(evt);
                }
            });

            btnGetStoredKey.setText("Get Stored Crypto Key");
            btnGetStoredKey.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnGetStoredKeyActionPerformed(evt);
                }
            });

            btnGetStoredSeed.setText("Get Stored Crypto Seed");
            btnGetStoredSeed.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnGetStoredSeedActionPerformed(evt);
                }
            });

            btnUpdatePassword.setText("Update Stored Password");
            btnUpdatePassword.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnUpdatePasswordActionPerformed(evt);
                }
            });

            btnRemoveFile.setText("Remove Crypto Info File");
            btnRemoveFile.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnRemoveFileActionPerformed(evt);
                }
            });

            btnFileChooser.setText("Browse...");
            btnFileChooser.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnFileChooserActionPerformed(evt);
                }
            });

            lblNewPassword.setText("New Password");

            javax.swing.GroupLayout pnlCryptoFileOpsLayout = new javax.swing.GroupLayout(pnlCryptoFileOps);
            pnlCryptoFileOps.setLayout(pnlCryptoFileOpsLayout);
            pnlCryptoFileOpsLayout.setHorizontalGroup(
                pnlCryptoFileOpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlCryptoFileOpsLayout.createSequentialGroup()
                    .addGroup(pnlCryptoFileOpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblCryptoKey)
                        .addComponent(lblPassword)
                        .addComponent(lblCryptoSeed)
                        .addComponent(lblFilepath))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(pnlCryptoFileOpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtCryptoKey)
                        .addGroup(pnlCryptoFileOpsLayout.createSequentialGroup()
                            .addGroup(pnlCryptoFileOpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtCryptoSeed, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(pnlCryptoFileOpsLayout.createSequentialGroup()
                                    .addComponent(txtFilepath, javax.swing.GroupLayout.PREFERRED_SIZE, 629, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnFileChooser)))
                            .addContainerGap())
                        .addGroup(pnlCryptoFileOpsLayout.createSequentialGroup()
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(58, 58, 58)
                            .addComponent(lblNewPassword)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtNewPassword))))
                .addGroup(pnlCryptoFileOpsLayout.createSequentialGroup()
                    .addComponent(btnCreateCryptoFile)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(btnGetStoredKey)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(btnGetStoredSeed)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(btnUpdatePassword)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(btnRemoveFile)
                    .addGap(0, 0, Short.MAX_VALUE))
            );
            pnlCryptoFileOpsLayout.setVerticalGroup(
                pnlCryptoFileOpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlCryptoFileOpsLayout.createSequentialGroup()
                    .addContainerGap(12, Short.MAX_VALUE)
                    .addGroup(pnlCryptoFileOpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtFilepath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblFilepath)
                        .addComponent(btnFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(pnlCryptoFileOpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtCryptoKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblCryptoKey))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(pnlCryptoFileOpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlCryptoFileOpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNewPassword)
                            .addComponent(txtNewPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pnlCryptoFileOpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPassword)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(pnlCryptoFileOpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblCryptoSeed)
                        .addComponent(txtCryptoSeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(29, 29, 29)
                    .addGroup(pnlCryptoFileOpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCreateCryptoFile)
                        .addComponent(btnGetStoredKey)
                        .addComponent(btnGetStoredSeed)
                        .addComponent(btnUpdatePassword)
                        .addComponent(btnRemoveFile)))
            );

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(pnlCryptoOps, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pnlCryptoFileOps, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap())
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(pnlCryptoOps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(pnlCryptoFileOps, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap())
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    // <editor-fold defaultstate="collapsed" desc="Action Performed Event Handlers"> 
    private void btnBytesToHexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBytesToHexActionPerformed
        if (isInputValid(txtInput.getText())) {
            try {                
                txtOutput.setText(crypto.bytesToBase64(txtInput.getText().getBytes()));
                txtInput.setText("");
            }
            catch (Exception ex) {
                showMessageBox("Exception occurred! - " + ex.getMessage(), "Exception!");
            }
        }
        else {
            showMessageBox("Input must not be null or empty!", "Input Error!");
        }
    }//GEN-LAST:event_btnBytesToHexActionPerformed

    private void btnEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncryptActionPerformed
        if (isInputValid(txtInput.getText()) && isInputValid(txtKey.getText()) &&
                isInputValid(txtSeed.getText())) {
            try {
                SecretKey key = crypto.getEncryptionKeyFromBytes(crypto.base64ToBytes(txtKey.getText()));
                int seed = Integer.parseInt(txtSeed.getText());
                
                txtOutput.setText(crypto.encrypt(txtInput.getText(), key, seed));
                txtInput.setText("");
            }
            catch (Exception ex) {
                showMessageBox("Exception occurred! - " + ex.getMessage(), "Exception!");
            }
        }
        else {
            showMessageBox("Input, key, and seed must not be null or empty!", "Input Error!");
        }
    }//GEN-LAST:event_btnEncryptActionPerformed

    private void btnGetCryptoKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetCryptoKeyActionPerformed
        try {
            txtOutput.setText(crypto.bytesToBase64(crypto.getNewEncryptionKey().getEncoded()));
        }
        catch (Exception ex) {
            showMessageBox("Exception occurred! - " + ex.getMessage(), "Exception!");
        }
    }//GEN-LAST:event_btnGetCryptoKeyActionPerformed

    private void btnDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecryptActionPerformed
        if (isInputValid(txtInput.getText()) && isInputValid(txtKey.getText()) &&
                isInputValid(txtSeed.getText())) {
            try {
                SecretKey key = crypto.getEncryptionKeyFromBytes(crypto.base64ToBytes(txtKey.getText()));
                int seed = Integer.parseInt(txtSeed.getText());
                
                txtOutput.setText(crypto.decrypt(txtInput.getText(), key, seed));
                txtInput.setText("");
            }
            catch (Exception ex) {
                showMessageBox("Exception occurred! - " + ex.getMessage(), "Exception!");
            }
        }
        else {
            showMessageBox("Input, key, and seed must not be null or empty!", "Input Error!");
        }
    }//GEN-LAST:event_btnDecryptActionPerformed

    private void btnHexToBytesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHexToBytesActionPerformed
        if (isInputValid(txtInput.getText())) {
            try {                
                txtOutput.setText(new String(crypto.base64ToBytes(txtInput.getText())));
                txtInput.setText("");
            }
            catch (Exception ex) {
                showMessageBox("Exception occurred! - " + ex.getMessage(), "Exception!");
            }
        }
        else {
            showMessageBox("Input must not be null or empty!", "Input Error!");
        }
    }//GEN-LAST:event_btnHexToBytesActionPerformed

    private void btnGetCryptoKeyFromBytesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetCryptoKeyFromBytesActionPerformed
        if (isInputValid(txtInput.getText())) {
            try {                
                txtOutput.setText(
                        crypto.bytesToBase64(
                                crypto.getEncryptionKeyFromBytes(
                                        txtInput.getText().getBytes()).getEncoded()));
                txtInput.setText("");
            }
            catch (Exception ex) {
                showMessageBox("Exception occurred! - " + ex.getMessage(), "Exception!");
            }
        }
        else {
            showMessageBox("Input must not be null or empty!", "Input Error!");
        }
    }//GEN-LAST:event_btnGetCryptoKeyFromBytesActionPerformed

    private void btnFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFileChooserActionPerformed
        dlgFileChooser.showOpenDialog(this);
        File chosenDirectory = dlgFileChooser.getSelectedFile();
        if (chosenDirectory != null) {
            txtFilepath.setText(chosenDirectory.getAbsolutePath() + File.separator + "CryptoInfo.crp");
        }
    }//GEN-LAST:event_btnFileChooserActionPerformed

    private void btnUpdatePasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatePasswordActionPerformed
        if (isInputValid(txtPassword.getText()) && isInputValid(txtNewPassword.getText())) {
            String oldPassword = txtPassword.getText();
            String newPassword = txtNewPassword.getText();
            String message = "Password Updated Successfully!";

            try {
                if (isInputValid(txtFilepath.getText())) {
                    cryptoFileManager.updateStoredCryptoPassword(txtFilepath.getText(),
                        oldPassword, newPassword);
                }
                else {
                    cryptoFileManager.updateStoredCryptoPassword(oldPassword, newPassword);
                }

                showMessageBox(message, "Result!");
            }
            catch (Exception ex) {
                showMessageBox("Exception occurred! - " + ex.getMessage(), "Exception!");
            }
        }
        else {
            showMessageBox("Please enter an unencrypted password to verify data update, and a new password!", "Enter Password!");
        }
    }//GEN-LAST:event_btnUpdatePasswordActionPerformed

    private void btnGetStoredSeedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetStoredSeedActionPerformed
        if (isInputValid(txtPassword.getText())) {
            String password = txtPassword.getText();
            String message = "Stored Crypto Seed is: ";

            try {
                if (isInputValid(txtFilepath.getText())) {
                    message += cryptoFileManager.getStoredCryptoSeed(
                        txtFilepath.getText(), password);
                }
                else {
                    message += cryptoFileManager.getStoredCryptoSeed(password);
                }

                showMessageBox(message, "Result!");
            }
            catch (Exception ex) {
                showMessageBox("Exception occurred! - " + ex.getMessage(), "Exception!");
            }
        }
        else {
            showMessageBox("Please enter an unencrypted password to verify data retrieval!", "Enter Password!");
        }
    }//GEN-LAST:event_btnGetStoredSeedActionPerformed

    private void btnGetStoredKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetStoredKeyActionPerformed
        if (isInputValid(txtPassword.getText())) {
            String password = txtPassword.getText();
            String message = "Stored Crypto Key is: ";
            String key = "";
            
            try {
                if (isInputValid(txtFilepath.getText())) {
                    key = crypto.bytesToBase64(cryptoFileManager.getStoredEncryptionKey(
                        txtFilepath.getText(), password).getEncoded());
                }
                else {
                    key = crypto.bytesToBase64(
                        cryptoFileManager.getStoredEncryptionKey(password).getEncoded());
                }

                StringSelection selection = new StringSelection(key);
                Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                clipboard.setContents(selection, selection);
                
                showMessageBox(message + key + 
                        " (This has also been copied to the clipboard for pasting)", "Result!");
            
            }
            catch (Exception ex) {
                showMessageBox("Exception occurred! - " + ex.getMessage(), "Exception!");
            }
        }
        else {
            showMessageBox("Please enter an unencrypted password to verify data retrieval!", "Enter Password!");
        }
    }//GEN-LAST:event_btnGetStoredKeyActionPerformed

    private void btnCreateCryptoFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateCryptoFileActionPerformed
        if (isInputValid(txtCryptoKey.getText()) && isInputValid(txtPassword.getText()) &&
            isInputValid(txtCryptoSeed.getText())) {
            try {
                SecretKey key = crypto.getEncryptionKeyFromBytes(crypto.base64ToBytes(txtCryptoKey.getText()));
                int seed = Integer.parseInt(txtCryptoSeed.getText());

                if (isInputValid(txtFilepath.getText())) {
                    cryptoFileManager.createCryptoInfoFile(txtFilepath.getText(),
                        key, txtPassword.getText(), seed);
                }
                else {
                    cryptoFileManager.createCryptoInfoFile(key, txtPassword.getText(), seed);
                }

                showMessageBox("File created successfully!", "File Creation Success!");
            }
            catch (Exception ex) {
                showMessageBox("Exception occurred! - " + ex.getMessage(), "Exception!");
            }
        }
        else {
            showMessageBox("Crypto Key, Password, and Crypto Seed must not be null or empty!", "Input Error");
        }
    }//GEN-LAST:event_btnCreateCryptoFileActionPerformed

    private void btnRemoveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveFileActionPerformed
        try {
            if (isInputValid(txtFilepath.getText())) {
                cryptoFileManager.removeCryptoInfoFile(txtFilepath.getText());
            }
            else
            {
                cryptoFileManager.removeCryptoInfoFile();
            }
            
            showMessageBox("File removed successfully!", "File Removal Success!");
        }
        catch (Exception ex) {
            showMessageBox("Exception occurred! - " + ex.getMessage(), "Exception!");
        }
    }//GEN-LAST:event_btnRemoveFileActionPerformed
    // </editor-fold>
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CryptoTestHarness.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CryptoTestHarness.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CryptoTestHarness.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CryptoTestHarness.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CryptoTestHarness().setVisible(true);
            }
        });
    }
    
    private static boolean isInputValid(String input) {
        if (input.equals("") || input == null) {
            return false;
        }
        else {
            return true;
        }
    }
    
    private static void showMessageBox(String infoMessage, String title)
    {
        JOptionPane.showMessageDialog(null, infoMessage, title, JOptionPane.INFORMATION_MESSAGE);
    }

    // <editor-fold defaultstate="collapsed" desc="Variables Declaration - do not modify">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBytesToHex;
    private javax.swing.JButton btnCreateCryptoFile;
    private javax.swing.JButton btnDecrypt;
    private javax.swing.JButton btnEncrypt;
    private javax.swing.JButton btnFileChooser;
    private javax.swing.JButton btnGetCryptoKey;
    private javax.swing.JButton btnGetCryptoKeyFromBytes;
    private javax.swing.JButton btnGetStoredKey;
    private javax.swing.JButton btnGetStoredSeed;
    private javax.swing.JButton btnHexToBytes;
    private javax.swing.JButton btnRemoveFile;
    private javax.swing.JButton btnUpdatePassword;
    private javax.swing.JFileChooser dlgFileChooser;
    private javax.swing.JLabel lblCryptoKey;
    private javax.swing.JLabel lblCryptoSeed;
    private javax.swing.JLabel lblFilepath;
    private javax.swing.JLabel lblInput;
    private javax.swing.JLabel lblKey;
    private javax.swing.JLabel lblNewPassword;
    private javax.swing.JLabel lblOutput;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblSeed;
    private javax.swing.JPanel pnlCryptoFileOps;
    private javax.swing.JPanel pnlCryptoOps;
    private javax.swing.JScrollPane scrollInput;
    private javax.swing.JScrollPane scrollOutput;
    private javax.swing.JTextField txtCryptoKey;
    private javax.swing.JTextField txtCryptoSeed;
    private javax.swing.JTextField txtFilepath;
    private javax.swing.JTextArea txtInput;
    private javax.swing.JTextField txtKey;
    private javax.swing.JTextField txtNewPassword;
    private javax.swing.JTextArea txtOutput;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtSeed;
    // End of variables declaration//GEN-END:variables
// </editor-fold>
}
